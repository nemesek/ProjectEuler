using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
using Microsoft.VisualStudio.TestTools.UnitTesting;
using ProjectEuler;

namespace Euler.Test
{
    [TestClass]
    public class Problem2Tests
    {
        private static Dictionary<int, int> Cache = new Dictionary<int,int>();
        private static int[] cacheArray = new int[4000000];
        private static int counter = 0;
        //Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
        //1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
        //By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

        [TestMethod]
        public void Problem2_Can_Solve()
        {
            // Arrange
            var expected = 4613732;
            var target = new Problem2();

            // Act
            var result = target.Solve();
            //GC.Collect();
            var imperativeResult = ImperativeSolution();
            //GC.Collect();
            var imperativeMemoizedResult = ImperativeSolutionMemoized();
            //GC.Collect();
            var imperativeArrayMemoizedResult = ImperativeSolutionArrayMemoized();

            // Assert
            Assert.AreEqual(expected, result);
            Assert.AreEqual(expected, imperativeResult);
            Assert.AreEqual(expected, imperativeMemoizedResult);
            Assert.AreEqual(expected, imperativeArrayMemoizedResult);
        }

        [TestMethod]
        public void Problem2_Can_Get10thFibTerm()
        {
            // Arrange
            var expected = 89;
            
            // Act
            var result = GetFibTerm(11);

            // Assert
            Assert.AreEqual(expected, result);
        }

        private static int ImperativeSolution()
        {
            var stop1 = new Stopwatch();
            stop1.Start();
            var total = 0;
            var fibTerm = 0;
            var index = 1;

            while (fibTerm < 4000000)
            {
                fibTerm = GetFibTerm(index);
                if (fibTerm % 2 == 0) total += fibTerm;
                index++;
            }
            stop1.Stop();
            Trace.WriteLine("Imperative: " + stop1.Elapsed);
            return total;
        }

        private static int ImperativeSolutionMemoized()
        {
            var stop1 = new Stopwatch();
            stop1.Start();
            var total = 0;
            var fibTerm = 0;
            var index = 1;

            while (fibTerm < 4000000)
            {
                fibTerm = GetFibTermMemoized(index);
                if (fibTerm % 2 == 0) total += fibTerm;
                index++;
            }
            stop1.Stop();
            Trace.WriteLine("Imperative Memoized: " + stop1.Elapsed);
            return total;
        }

        private static int ImperativeSolutionArrayMemoized()
        {
            var stop1 = new Stopwatch();
            stop1.Start();
            var total = 0;
            var fibTerm = 0;
            var index = 1;

            while (fibTerm < 4000000)
            {
                fibTerm = GetFibTermMemoizedWithArray(index);
                if (fibTerm % 2 == 0) total += fibTerm;
                index++;
            }
            stop1.Stop();
            Trace.WriteLine("Imperative Array Memoized: " + stop1.Elapsed);
            return total;
        }

        private static int GetFibTerm(int index)
        {
            if (index == 1 || index == 2) return 1;
            else return GetFibTerm(index - 2) + GetFibTerm(index - 1); 
        }

        private static int GetFibTermMemoized(int index)
        {
            if (index == 1 || index == 2) return 1;

            if (Cache.ContainsKey(index)) return Cache[index];
            
            var result = GetFibTerm(index - 2) + GetFibTerm(index - 1);
            Cache[index] = result;
            return result;
            
        }

        private static int GetFibTermMemoizedWithArray(int index)
        {
            if (index == 1 || index == 2)
            {
                cacheArray[index] = 1;
                counter++;
                return 1;
            }

            if (index < counter)
            {
                return cacheArray[index];
            }

            var result = GetFibTerm(index - 2) + GetFibTerm(index - 1);
            cacheArray[index] = result;
            return result;
        }
    }
}
